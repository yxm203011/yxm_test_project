多态:
针对于某个方法调用时，在调用前不确定调用的是哪个方法，其真正执行的方法取决于运行时期实际类型的方法
示例
public class Main {
    public static void main(String[] args) {
        Person p = new Student();
        p.run(); // 应该打印Person.run还是Student.run?
    }
}

class Person {
    public void run() {
        System.out.println("Person.run");
    }
}

class Student extends Person {
    @Override
    public void run() {
        System.out.println("Student.run");
    }
}
由此可见调用的是student的run方法;


抽象类：
抽象类的本身设计只能用于被继承，因此抽象类可以强迫子类必须实现其定义的抽象方法，否则会编译失败
示例：
public class Main {
    public static void main(String[] args) {
        Person p = new Student();
        p.run();
    }
}

abstract class Person {
    public abstract void run();
}

class Student extends Person {
    @Override
    public void run() {
        System.out.println("Student.run");
    }
}

接口：
在java中使用Interface声明一个接口
抽象类和接口的区别：	abstract class	            interface
          继承	    只能extends一个class	        可以implements多个interface
          字段	    可以定义实例字段	            不能定义实例字段
          抽象方法	可以定义抽象方法	            可以定义抽象方法
          非抽象方法	可以定义非抽象方法	            可以定义default方法
示例：
interface Person {
    void run();
    String getName();
}
class Student implements Person {
    private String name;

    public Student(String name) {
        this.name = name;
    }

    @Override
    public void run() {
        System.out.println(this.name + " run");
    }

    @Override
    public String getName() {
        return this.name;
    }
}
实现类可以不必覆写default方法。default方法的目的是，当我们需要给接口新增一个方法时，会涉及到修改全部子类。如果新增的是default方法，那么子类就不必全部修改，只需要在需要覆写的地方去覆写新增方法。
default方法和抽象类的普通方法是有所不同的。因为interface没有字段，default方法无法访问字段，而抽象类的普通方法可以访问实例字段
示例：public class Main {
    public static void main(String[] args) {
        Person p = new Student("Xiao Ming");
        p.run();
    }
}

interface Person {
    String getName();
    default void run() {
        System.out.println(getName() + " run");
    }
}

class Student implements Person {
    private String name;

    public Student(String name) {
        this.name = name;
    }

    public String getName() {
        return this.name;
    }
}


静态变量和静态方法:
用static关键字修饰的字段为静态变量
用static关键字修饰的方法为静态方法
静态方法和静态变量都可以通过类名调用
示例：
public class Main {
    public static void main(String[] args) {
        Person.setNumber(99);
        System.out.println(Person.number);
    }
}

class Person {
    public static int number;

    public static void setNumber(int value) {
        number = value;
    }
}


public、private、protected关键字的作用域:
public修饰的类和接口可以被其他的任何类访问
private修饰的字段和方法只能在当前类中使用
protected修饰的方法可以被子类访问，也可以被子类的子类访问


泛型：
java中的泛型是在编译器编译时实行的，编译器永远将泛型T 看成Object处理，但是在需要转型的时候编译器才会将T进行强制转换类型


File文件
在创建File的时候 并不会对磁盘进行操作 只有在调用file中的某个方法时才会进行真正的磁盘操作
file.getPath();//获取File file = new File("1111");传入路径 也就是获取1111
file.getAbsolutePath();//获取绝对路径
file.getCanonication();//获取规范路径（有一些路径会用..来表示上级 这个是将..转换为/）
file.isFile();//判断当前文件是否存在
file.isDirectory();//判断当前文件夹是否存在
file.delete();//删除文件 并返回 true或者false 判断是否删除成功
file.deleteOnExit();//JVM退出后自动删除文件
file.listFiles();//列出目录下的所有子集
file.list();//也是列出目录下的所有子集只不过listFiles提供了重载的方法 可以过滤掉一些不要的文件或目录


InputStream(输入流)
InputStream和FileInputStream都是输入流FileInputStream是InputStream的子类  FileInputStream是从文件流中获取
执行完成之后必须执行colse方法关闭流  避免资源浪费
inputStream.read();方法读取输入流的下一个字节如果是-1就表示不能再读取了
如果每次都一个字节一个字节读取效率很慢也会浪费资源 所以一般使用缓存   在read()方法中传入byte[]数组  表示读取若干个字节并填充到byte中


OutPutStream(输出流)
outPutStream.write(int i);写入一个字节到输出流
outPutStream.flush();因为输出流不是读取一个字节就输出 而是有一个相当于byte的缓存等缓存满了再输出 而flush是强制将缓存中的内容输出


正则表达式
匹配任意字符使用.
匹配0-9中的任意字符使用\d（Java中需要转义则需要使用\\d）
匹配空白字符串使用\t
匹配一个字母、数字、下划线使用\w
匹配非数字使用\D
使用*表示可以匹配多个比如说A\d 需要匹配A380  则可以使用A\d*来匹配多个数字  也包括0个
使用+表示至少要匹配一个
使用?表示可以匹配0个或1个
使用{}来指定匹配多少个字符例如A\d{3}匹配三个字符

String.matches(aaa);//aaa就是定义的正则表达式的规则  字符串使用.matches来判断当前字符串是否满足规则